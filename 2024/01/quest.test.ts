import { expect, test } from 'vitest'

export function sum(notes: string): number {
	let potionsUsed = 0
	for (const char of notes) {
		if (char === 'B') {
			potionsUsed++
		}
		if (char === 'C') {
			potionsUsed += 3
		}
	}
	return potionsUsed
}

const potionsNeeded = {
	A: 0,
	B: 1,
	C: 3,
	D: 5,
	x: 0
}

export function sum2(notes: string): number {
	let potionsUsed = 0
	for (let i = 0; i < notes.length; i += 2) {
		const pair = notes[i] + notes[i + 1]
		const arePoweredUp = !pair.includes('x')
		potionsUsed += potionsNeeded[pair[0]] + potionsNeeded[pair[1]]
		if (arePoweredUp) {
			potionsUsed += 2
		}
	}
	return potionsUsed
}

export function sum3(notes: string): number {
	let potionsUsed = 0
	for (let i = 0; i < notes.length; i += 3) {
		const pair = notes[i] + notes[i + 1] + notes[i + 2]
		potionsUsed += potionsNeeded[pair[0]] + potionsNeeded[pair[1]] + potionsNeeded[pair[2]]
		let xCount = 0;
		for (const char of pair) {
			if (char === 'x') {
				xCount++
			}
		}

		const extraPotionsPerMonster = xCount === 0 ? 2 : xCount === 1 ? 1 : 0
		for (const char of pair) {
			if (char !== 'x') {
				potionsUsed += extraPotionsPerMonster
			}
		}
	}
	return potionsUsed
}


test('adds 1 + 2 to equal 3', () => {
	expect(sum('ABBAC')).toBe(5)
})

test('ther', () => {
	console.log(sum('BBBCBAABAACABBCCCABBCBCBBABBACABCBBCCAABCACBBCBAACACCBAABAABABAABACCCABABABCCCBBAACABCABACCCBACBBBCBCACACAAACBCBABABCACBCCCBACBCCBBBCCBCAACABABAACBABCCBCCCBCABABBBCBBCACBAAACBABAAAACCCBCAABACBBCBBAABACBAABBACCCABACCCACABCBACBCAACAAACBACBCCCBAAAAABACAAABBBBAABABABBBBCBBACACBAACABACCBACABBAAABBACACAAACCAABBACBAAAABBCACBAACCBACACAAACBBBBBAACBABBBABACACCABCCAAACBCCAACCACCBAABBABACCBAAABAACCABAACACBBCACAAACCBCCABCACBBBBCBABABBCACBABCAABACCCABBBABBCCCBBAABCBBCBCCABBCBACACACBCBBAACAABACCBCCBAACABCABAACBCCCBBBBAACBAAACCACCBAACBBABABCCBAABAAAACCAABBBBBACCCAACAAABBCBBBACABACBCABCCCABBCACCCABCAAACACACAAAACAABABCACBCBAACCACACAABABCABBBCABCCCCBACBBCBCACAAACCABCBBCBAABAAAACCCBBABAACABCACCBCAAAACCACBBACBACCBCBCACCBBAACBBAABBABABBCBABAABABABCAACCCCCABCAACBBCACABAABCAACBCABCBBAABABCCCCBBABCABBABCCABCCBCACACAABAACABACCCABBBCBABBACCACACACACBCACACCABBCCACCABCCBAABCCAACAABBABBABBCABCCCBBAABCBAAABBAACBCBBAABAABABCCCCACABACBCACCBBBCAACAABCBBBCBBCACCCCBBCABBBBAAABCAACBCACBAACABBCBBCCBCBAACBAAACABACCCACCBACACC'))
})

test('adds 1 + 2 to equal 3', () => {
	expect(sum2('AxBCDDCAxD')).toBe(28)
})

test('real 2', () => {
	console.log(sum2('ABCACxDDCBCxxCDADBxCAADxDDBBCCDxACBAxDCCBAxBDDDBxAABCACDABACCBADBxBCDBBDBDDDCDCBADCBADBBDCBAABxDCBBCDDCCADACAxBCDxxBBDABCDCDCBBxBBCAADxDDxxCBDBBDCCDADBDBBBBABCBBBCBDAxDxBACBBxCAxACAxCDxBAABCCBBBBDxxCDxABxBBBCCDCCADADDBDCAxBACCDAxBADBxBDDCCDDAADDCDCBAxBCBCCCCACADCADxDxxxBxDDCDxBxBBCCDxAACADCBCBCBBABCADAxCBxBDACCDBADxCAxCxxBDDCACBxDxACBxCDxABBDDBxxABCCxCDCCCDBBxAACBBBDAxBDBCDDBxCBACCBAAxAACCxDCDACDBCBDBCABDCDBCBCDBAABxACADCCBABDDABAACBBDADABBCDDADDBDxxxACBDBxCDCCDABBxDCCABABBDACxBCCxCDBACCCDCCBCDxDAxCxDCACBBBxBAABxAxBAADDBDABDDDxDAAACBDBBAABACCAACBDBDCDxBDDBDxxDACCBAACCDxBADBCDCAACDCACCDBBBABCABxBAADADBCBCCABxCDACCACADADDADCCDCBAABABBDDCBDACDBxBBCADxDDABBxAADDABACCBDDCBCBCDBCADCxCBBCBABABCBDAABCCDAABBAABADxxBAxDABxDCAxxABBBBADDAABAADAxDBCxABBBBCBABBDBDCCDBADDBDDDDAAACACxACCDCDDDDxAAxDBDBxCADxBCBCCDxDAxCDAAAABBBCBxABADDAAABCxBDxDCBABABCxCABBBADCDDCxADAACBDDCDACCxADABBDxCCACCACADCCDABBDCACACABxDADCxCDACACBBBCAABBAxBxBAxCxCBxCxABDDCACABCDxCABCADCCCADCDBACxCxBDBCDAADBADACCDCBCAADCDBBCCxBDCCxABBBDCxCCBDBDDCCBxDAAxCCACBxACCxACCBADCBADCBBCxxDCDCBCBABCxCCxCDCCCACxBAAxABBADBBxCBAACAxDAAAAAxBCBCDDDDCxAADADDDBAxCCDCBAxAADBADACCACBDADxBAACAAABxBBDBCADxACAxBDBCCDDAxCCCxBDBCBDxCBDBCDxDBBDBCCACDCBBABAABDCBCAADCxABxBAABDCDCCACDDBDDDBCCDxBDADxCCBxCDDDAACBCCACBDCxCADCABCxABAxAABxDDCDCxACCCCDCCxADBCCADADADCBDDAxCBCCCCDABAACCxCDABxDADCDDCACCDCACDDACDBCBxCxAxAABDCDBBABABADACCBACBBBACBDCBCADxxBCxDCAADABAADBCACDDDBDACCCADxBBCBBABACBACBCxCDCxAACDBACxABCBCCDCCABCBBDBBAAADAxACCDACBADACDDDAACACBCCBBBDAxBABBCBBDBDDDBCDBAxDxCBDBCCCxABDABBDCAxDxxDDACxBABBAxCCABADDDCCADACxAADACCBAAAABCBDDCABAABDCBCxxBCBAACBxACBBADDxxACBDCCBADCBBDxABABDCBCAABADACBBACxBxBxBACDBACCBCDAABDCDCABDxBDBCDBABDBCCBAADDDBDDCABxAAACxCADBxAADxBxDAxBCADDBCABBCCBxxDACDCDCBBCCxBCBxBCADBBCABBDBDBCABDBxABxACAABDDxBxACBCDDBABDDBDBCAxAACAACCxAxACCBCAxDACCCBCxBCABDBCxBCDCBADBADDCDxADBADBxBxACBDCDDDCCCBxDxACCABADDBACCBCBBDCCCADBCBxCACBAxBCCABCDAADBDCACDDDxDBAADCAABCBxAABCBBAADDABxBCDDxDAACxCBDDBDAxCBCBDxDADDBBABDDBxDACxABCDCDADDxABABBAB'))
})

test('adds 1 + 2 to equal 3', () => {
	expect(sum3('xBxAAABCDxCC')).toBe(30)
})

test('real 3', () => {
	console.log(sum3(''))
})