import { describe, expect, test } from 'vitest'


function planNeededPotions(incomingCreatures: string, groupSizes: number, potionsNeededByCreature = {
	A: 0,
	B: 1,
	C: 3,
	D: 5,
}) {
	let blockedMined = 0;
	const world = incomingCreatures.split('\n').map(s => [...s.replace(/\./g, '0')].map(c => c === '#' ? -1 : +c));
	const rowCount = world.length;
	const colCount = world[0].length;
	for (let r = 0; r < rowCount; r++) {
		for (let c = 0; c < colCount; c++) {
			if (world[r][c] === -1) {
				world[r][c] = 1
				blockedMined++;
			}
		}
	}
	let prev = 0
	let current = 1;
	let next = 2;
	console.log(world.map(r => r.join('')).join('\n'))
	while (true) {
		let startedWith = blockedMined
		for (let r = 0; r < rowCount; r++) {
			for (let c = 0; c < colCount; c++) {
				let canGoDeeper = true;
				for (const [nr, nc] of [[r + 1, c], [r, c + 1], [r - 1, c], [r, c - 1]]) {
					if (world[nr]?.[nc] === undefined) {
						canGoDeeper = false;
						continue
					}
					if (world[nr][nc] < current) {
						canGoDeeper = false;
						break
					}
				}
				if (canGoDeeper) {
					world[r][c] = next;
					blockedMined++;
				}
			}
		}
		prev++;
		current++;
		next++;
		console.log()
		console.log(world.map(r => r.join('')).join('\n'))
		if (startedWith === blockedMined) {
			break
		}
	}
	return blockedMined
}

function planNeededPotionsDiag(incomingCreatures: string, groupSizes: number, potionsNeededByCreature = {
	A: 0,
	B: 1,
	C: 3,
	D: 5,
}) {
	let blockedMined = 0;
	const world = incomingCreatures.split('\n').map(s => [...s.replace(/\./g, '0')].map(c => c === '#' ? -1 : +c));
	const rowCount = world.length;
	const colCount = world[0].length;
	for (let r = 0; r < rowCount; r++) {
		for (let c = 0; c < colCount; c++) {
			if (world[r][c] === -1) {
				world[r][c] = 1
				blockedMined++;
			}
		}
	}
	let prev = 0
	let current = 1;
	let next = 2;
	while (true) {
		let startedWith = blockedMined
		for (let r = 0; r < rowCount; r++) {
			for (let c = 0; c < colCount; c++) {
				if (world[r][c] !== current) {
					continue
				}
				let canGoDeeper = true;
				console.log([
					[r + 1, c], [r, c + 1], [r - 1, c], [r, c - 1],
					[r + 1, c + 1], [r + 1, c - 1], [r - 1, c + 1], [r - 1, c - 1]
				])
				for (const [nr, nc] of [
					[r + 1, c], [r, c + 1], [r - 1, c], [r, c - 1],
					[r + 1, c + 1], [r + 1, c - 1], [r - 1, c + 1], [r - 1, c - 1]
				]) {
					if (world[nr]?.[nc] === undefined) {
						canGoDeeper = false;
						continue
					}
					if (world[nr][nc] <= prev) {
						canGoDeeper = false;
						break
					}
				}
				if (canGoDeeper) {
					world[r][c] = next;
					blockedMined++;
				}
			}
		}
		prev++;
		current++;
		next++;
		if (startedWith === blockedMined) {
			break
		}
	}
	return blockedMined
}

test('throws error when groupSizes is not divisible by incomingCreature count', () => {
	expect(() => planNeededPotions('ABC', 2)).toThrow()
})

describe('Part 1', () => {
	test('Example', () => {
		expect(planNeededPotions(`..........
..###.##..
...####...
..######..
..######..
...####...
..........`.trim(), 1)).toBe(35)
	})

	test('Notes', () => {
		expect(planNeededPotions(`..............................
..............................
..............................
.............##...............
.......#..#.####.###..........
.......##.##########..........
.......###############........
.........#############........
.........##########..#........
.........##..#####............
.............#.###............
...............#..............
..............................
..............................`.trim(), 1)).toBe(127)
	})
})

describe('Part 2', () => {
	test('Example', () => {
		expect(planNeededPotions('AxBCDDCAxD', 2)).toBe(28)
	})

	test('Notes', () => {
		expect(planNeededPotions(`......................................................................
......................................................................
......................................................................
......................................................................
...................................##.................................
................................#####..#..............................
............................#..##########....###......................
............................#############....###......................
..........................#.################.###.#....................
.......................###########################....................
......................###########################.....................
.....................###########################......................
......................##########################......................
.....................###########################......................
.....................############################.....................
...................###############################....................
..................################################....................
...............####################..#############....................
.................################################.....................
................#################################.....................
..................###############################.....................
..................################################....................
...................#############################......................
....................############################......................
....................##############################....................
....................###########################.#.....................
.......................########################.......................
......................############################....................
......................#..#######################......................
..........................###################.##......................
..........................####...########.............................
...................................###..##............................
...................................##...#.............................
...................................#..................................
......................................................................`.trim(), 2)).toBe(2771)
	})
})

describe('Part 3', () => {
	test('Example', () => {
		expect(planNeededPotionsDiag(`..........
..###.##..
...####...
..######..
..######..
...####...
..........`.trim(), 3)).toBe(29)
	})

	test('Notes', () => {
		expect(planNeededPotionsDiag(`
#####################..............................................................#.......................................#..################
#.###################.................................................#..........###.....................................#.#################.#
#####################.#...........................................#..##.........###....................................#######################
#######################...................................#.......##.##...#....#.####..................................#######################
######################...................................##......##########...######..................................########################
######################.................................####.....###########....#####.#................................###.####################
######################.................................####.....############.....######.................................######################
#####################................................#######.#..#.############..########.................................#.###################
#######################...............................#####.###...###################.#####................................###################
#####################..................................#######################..#####.#####................................###################
#####################...........................############################################.................................#################
#####################............................############################.##############.................................#######.#########
######################...........................###########################################.................................#################
######################............................############################################...............................#################
####.#################..........................##############################################.#..............................#####.##########
#################..#.##.........................################################################.................................##.########.#
####...##########..#..#.........................###################################################.............................###..##..###..
.#........#.#####...............................################################################......................................#..##...
..........#.....#...............................#################################################.............................................
...............................................###############################################................................................
...............................................#..#############################################...............................................
...................................................############################################...............................................
..................................................##############################################..............................................
..................................................###################......#####################..............................................
...................................................#################.######.####################..............................................
...................................................################.###..###.###################..............................................
...................................................################.###..###.#####################............................................
..................................................##################.######.###################...............................................
..................................................###################......#####################.....................................#........
................................................#################################################....................................####.....
................................................###################################################................................#####......
.................................................###############################################.................................########.....
.................................................################################################...............................##.######.....
................................................################################################................................##########.##.
................................................##############################################...................................########.###.
.................................................###########################################..................................###############.
...................................................#########################################...................................###############
..................................................#######################################.###...................................##############
...............................................#########################################....##.................................###############
..#..##.........................................#########################################...###............................#.#################
#########...#...................................##.############################################...........................####################
.########.###....................................#..############################################.#.........................###################
##############....................................#######################################.########.........................###################
################....................................####################################...#....##.........................###################
############........................................##..###########################.####................................######################
#############.......................................##...####################..###...##................................#######################
###############...........................................###################.........#................................#######################
##############..............................................#..############.............................................######################
################...........................................##....##########...........................................########################
################...............................................##########.#...........................................########################
#.###############..............................................###########............................................######################.#
###############..................................................#########...............................................#####################`.trim(), 3)).toBe(10178)
	})
})
